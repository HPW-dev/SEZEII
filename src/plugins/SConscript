#!/usr/bin/env python
Import(["env", "is_linux", "compiler", "defines",
  "cpp_flags", "ld_flags"])

platform_dir = "windows"
if (is_linux):
  platform_dir = "linux"
plugin_out = "../../bin/plugins/" + platform_dir + "/free/"

env.SharedLibrary(
  target = plugin_out + "invert",
  source = "invert/invert.cpp",
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)

env.SharedLibrary(
  target = plugin_out + "colorop",
  source = [
    "colorop/colorop.cpp",
    "../utils/cmd-parser.cpp",
    "../utils/random.cpp",
    "../utils/aalloc.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)

env.SharedLibrary(
  target = plugin_out + "pixelsort",
  source = [
    "pixelsort/pixelsort.cpp",
    "../image/image.cpp",
    "../image/color.cpp",
    "../utils/aalloc.cpp",
    "../utils/cmd-parser.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)

env.SharedLibrary(
  target = plugin_out + "lineswap",
  source = [
    "lineswap/lineswap.cpp",
    "../utils/cmd-parser.cpp",
    "../utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)

env.SharedLibrary(
  target = plugin_out + "average",
  source = [
    "frame-average/frame-average.cpp",
    "../utils/cmd-parser.cpp",
    "../image/image.cpp",
    "../image/color.cpp",
    "../utils/aalloc.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)

env.SharedLibrary(
  target = plugin_out + "tvsim",
  source = [
    Glob("tvsim/*.cpp"),
    "../utils/cmd-parser.cpp",
    "../image/image.cpp",
    "../image/color.cpp",
    "../utils/aalloc.cpp",
    "../utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)

env.SharedLibrary(
  target = plugin_out + "stars",
  source = [
    Glob("stars/*.cpp"),
    "../utils/cmd-parser.cpp",
    "../image/image.cpp",
    "../image/color.cpp",
    "../utils/aalloc.cpp",
    "../utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)

env.SharedLibrary(
  target = plugin_out + "rdither",
  source = [
    Glob("rdither/*.cpp"),
    "../utils/cmd-parser.cpp",
    "../image/image.cpp",
    "../image/color.cpp",
    "../utils/aalloc.cpp",
    "../utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags)
