#!/usr/bin/env python
Import(["env", "is_linux", "compiler", "defines",
  "cpp_flags", "ld_flags"])

platform_dir = "windows"
if (is_linux):
  platform_dir = "linux"
plugin_out = "../../bin/plugins/" + platform_dir + "/free/"

modules = [
  "../../modules/itlib/include",
  ".",
  "..",
  "../..", # for plugin-api
]
src_dir = "../"

env.SharedLibrary(
  target = plugin_out + "invert",
  source = "invert/invert.c",
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "colorop",
  source = [
    "colorop/colorop.cpp",
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "utils/random.cpp",
    src_dir + "utils/aalloc.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "pixelsort",
  source = [
    "pixelsort/pixelsort.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
    src_dir + "utils/cmd-parser.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "lineswap",
  source = [
    "lineswap/lineswap.cpp",
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "average",
  source = [
    "frame-average/frame-average.cpp",
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "tvsim",
  source = [
    Glob("tvsim/*.cpp"),
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
    src_dir + "utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "stars",
  source = [
    Glob("stars/*.cpp"),
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
    src_dir + "utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "rdither",
  source = [
    Glob("rdither/*.cpp"),
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
    src_dir + "utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "shatter",
  source = [
    Glob("shatter/*.cpp"),
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
    src_dir + "utils/random.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "3d-denoise",
  source = [
    Glob("3d-denoise/*.cpp"),
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
    src_dir + "utils/log.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)

env.SharedLibrary(
  target = plugin_out + "stabelyzer",
  source = [
    Glob("stabelyzer/*.cpp"),
    src_dir + "utils/cmd-parser.cpp",
    src_dir + "image/image.cpp",
    src_dir + "image/color.cpp",
    src_dir + "utils/aalloc.cpp",
    src_dir + "utils/log.cpp",
  ],
  CXX = compiler,
  CPPDEFINES = defines,
  LINKFLAGS = ld_flags,
  CXXFLAGS = cpp_flags,
  CPPPATH = modules)
